Modules:
- description: Explore the Golang 3rd party ecosystem
  id: 48
  level: 1.0
  name: Go's 3rd Party Ecosystem
  topic: Go
- description: Understand the basic data types of the Go language
  id: 53
  level: 1.0
  name: Data Types
  topic: Go
- description: Learn how to debug Go programs, techniques and tools like Delve
  id: 54
  level: 1.0
  name: Debugging
  topic: Go
- description: Understand the error package and using errors in your Go code
  id: 56
  level: 1.0
  name: Error Handling
  topic: Go
- description: How to develop functions in Go
  id: 57
  level: 1.0
  name: Functions
  topic: Go
- description: Learn about the history and basic usage of the Go language
  id: 58
  level: 1.0
  name: Go Overview
  topic: Go
- description: Learn about the http package from the Go standard library
  id: 59
  level: 1.0
  name: The Go Http Library
  topic: Go
- description: Learn how to organize and share Go code using modules
  id: 62
  level: 1.0
  name: Go Modules
  topic: Go
- description: Learn how to create Go packages
  id: 64
  level: 1.0
  name: Package Management
  topic: Go
- description: Learn how Go packages, libraries, and main (drivers) programs work
    in Go
  id: 65
  level: 1.0
  name: Program Construction
  topic: Go
- description: Learn about the reflection package from the Go standard library
  id: 66
  level: 1.0
  name: Reflection
  topic: Go
- description: Review of the Go language for those with basic knowledge of Go
  id: 67
  level: 1.0
  name: Review of Go
  topic: Go
- description: Learn about the Go standard library
  id: 68
  level: 1.0
  name: The Go Standard Library
  topic: Go
- description: Learn about syntax and flow control in Go
  id: 69
  level: 1.0
  name: Syntax and Flow Control
  topic: Go
- description: Learn how to create user defined types in Go
  id: 71
  level: 1.0
  name: User Defined Types
  topic: Go
- description: ''
  id: 72
  level: 1.0
  name: Brown Field Microservices
  topic: Microservices
- description: ''
  id: 73
  level: 1.0
  name: Cloud Native Transactions
  topic: Microservices
- description: ''
  id: 75
  level: 1.0
  name: Gateways and Service Meshes
  topic: Microservices
- description: ''
  id: 77
  level: 1.0
  name: Kubernetes Services and Networking
  topic: Microservices
- description: ''
  id: 78
  level: 1.0
  name: Microservice Communications I - REST
  topic: Microservices
- description: ''
  id: 79
  level: 1.0
  name: Microservice Communications II - RPC
  topic: Microservices
- description: ''
  id: 80
  level: 1.0
  name: Microservice Communications III - Messaging
  topic: Microservices
- description: ''
  id: 81
  level: 1.0
  name: Microservice Operability
  topic: Microservices
- description: ''
  id: 82
  level: 1.0
  name: Microservice Orchestration
  topic: Microservices
- description: ''
  id: 83
  level: 1.0
  name: Microservice Overview
  topic: Microservices
- description: ''
  id: 84
  level: 1.0
  name: Software Delivery Pipelines
  topic: Microservices
- description: ''
  id: 85
  level: 1.0
  name: Observability Overview
  topic: Microservices
- description: ''
  id: 86
  level: 1.0
  name: Stateless Services and Polyglot Persistence
  topic: Microservices
- description: Learn the basic components of Kafka and how they programmatically relate
  id: 91
  level: 1.0
  name: Overview of Kafka Development
  topic: Kafka
- description: Learn the Producer client API
  id: 92
  level: 1.0
  name: Building Producers
  topic: Kafka
- description: Learn the Consumer client API
  id: 93
  level: 1.0
  name: Building Consumers
  topic: Kafka
- description: Learn the Connector API
  id: 94
  level: 1.0
  name: Developing Connectors
  topic: Kafka
- description: Learn how Producers can be resilient to Kafka failures
  id: 95
  level: 1.0
  name: Managing Failure Modes in Producers
  topic: Kafka
- description: Learn how Consumers can be resilient to Kafka failures
  id: 96
  level: 1.0
  name: Managing Failure Modes in Consumers
  topic: Kafka
- description: Learn the Stream API
  id: 97
  level: 1.0
  name: Developing Stream Processors
  topic: Kafka
- description: Learn about state management when using the Stream API
  id: 98
  level: 1.0
  name: Developing Stateful Stream Processors
  topic: Kafka
- description: Introduction to containers and containerized applications using Docker
  id: 9
  level: 1.1
  name: Containers Overview
  topic: Containers
- description: Introduction to containers, image building with Dockerfiles and using
    image registries
  id: 47
  level: 1.1
  name: Container Jump Start
  topic: Containers
- description: OCI / Docker images including registries and image creation with Dockerfiles
  id: 8
  level: 1.5
  name: Images Overview
  topic: Containers
- description: Examination of container images, image metadata, and pushing images
    to private registries
  id: 88
  level: 1.6
  name: Images and Registries
  topic: Containers
- description: Learn advance usage patterns of functions and methods
  id: 49
  level: 2.0
  name: Advanced Functions and Methods
  topic: Go
- description: Explorer using and managing channel objects
  id: 50
  level: 2.0
  name: Channels as First Class Values
  topic: Go
- description: Learning how to control asynchronous Go routines with the context package
  id: 51
  level: 2.0
  name: Context
  topic: Go
- description: Learn how to create concurrent functions in Go
  id: 52
  level: 2.0
  name: CSP and Go Routines
  topic: Go
- description: Learn how to use the Go profiling tools
  id: 55
  level: 2.0
  name: Profiling and Performance
  topic: Go
- description: Learn the best practices when developing Go programs
  id: 60
  level: 2.0
  name: Idiomatic Go
  topic: Go
- description: Learn how to design and refactor Go code
  id: 61
  level: 2.0
  name: Methods and Interfaces
  topic: Go
- description: Learn how to write tests in Go
  id: 70
  level: 2.0
  name: Testing
  topic: Go
- description: Examination of Kubernetes control plane components, etcd, HA models,
    and worker Node agents
  id: 4
  level: 2.1
  name: Kubernetes Architecture
  topic: Kubernetes
- description: Introduction to Kubernetes architecture and the concepts of how Kubernetes
    deploys applications
  id: 25
  level: 2.1
  name: Kubernetes Overview
  topic: Kubernetes
- description: Defining Kubernetes Pods, Pod lifecycles, and pod creation using YAML
    manifests
  id: 27
  level: 2.3
  name: Pod Basics
  topic: Kubernetes
- description: 'Introduction to building container images with Dockerfiles including:
    Dockerfile syntax, caching, and build options'
  id: 89
  level: 2.3
  name: 'Dockerfiles: Basics'
  topic: Containers
- description: 'Dynamic Kubernetes application configuration using: ConfigMaps, Secrets,
    and the Downward API'
  id: 2
  level: 2.4
  name: Application Configuration
  topic: Kubernetes
- description: 'Advanced patterns using Dockerfiles: multistage and automated builds,
    advanced syntax, and best practices'
  id: 90
  level: 2.4
  name: 'Dockerfiles: Advanced'
  topic: Containers
- description: Overview of all of Kubernetes' controllers for stateless, batch, and
    stateful applications
  id: 12
  level: 2.5
  name: Controllers
  topic: Kubernetes
- description: Zero downtime rolling updates for stateless applications using the
    Deployment controller
  id: 11
  level: 2.6
  name: Deployments
  topic: Kubernetes
- description: Data science workloads and batch applications using Kubernetes Jobs
    and CronJobs
  id: 10
  level: 2.7
  name: Batch Jobs
  topic: Kubernetes
- description: Expose Pods to clients using Kubernetes Services and DNS
  id: 31
  level: 2.7
  name: Services
  topic: Kubernetes
- description: In-depth examination of the Kubernetes Dashboard
  id: 13
  level: 2.9
  name: Dashboard
  topic: Kubernetes
- description: Templating for Kubernetes application manifests using the kustomize
    command line utility
  id: 17
  level: 2.99
  name: Kustomize
  topic: Kubernetes
- description: 'Overview the aspects of Observability: Logging, metrics, and tracing
    and implementations in Kubernetes'
  id: 24
  level: 2.99
  name: Observability Overview
  topic: Kubernetes
- description: Overview of software defined networking, network policy and ingress
    load balancing
  id: 33
  level: 3.0
  name: Pod Networking Overview
  topic: Kubernetes
- description: Examining multi-container Pod architecture, Pod design patterns, and
    best practices for Pods
  id: 28
  level: 3.1
  name: Pod Architecture
  topic: Kubernetes
- description: Overview of Kubernetes API security (RBAC, Namespaces, PSP) and Pod
    security (Security Context, Capabilities, etc.)
  id: 87
  level: 3.1
  name: Security Overview
  topic: Kubernetes
- description: 'Kubernetes day 2 operations covered: version upgrades and adding infrastructure
    nodes'
  id: 7
  level: 3.2
  name: Cluster Maintenance
  topic: Kubernetes
- description: 'Scheduling Pods using Pod and Node metadata: affinities, anti-affinities,
    Node taints and Pod tolerations'
  id: 29
  level: 3.2
  name: Scheduling
  topic: Kubernetes
- description: 'Software defined networking (SDN) and Kubernetes: networking models,
    network policy, and SDN configuration'
  id: 32
  level: 3.3
  name: Software Defined Networking
  topic: Kubernetes
- description: 'Kubernetes Network Policy concepts and primitives: ingress and egress
    policies, patterns, and limitations'
  id: 39
  level: 3.3
  name: Network Policy
  topic: Kubernetes
- description: Kubernetes Role Based Access Control (RBAC) concepts and primitives
    for users and application Pods
  id: 37
  level: 3.5
  name: RBAC
  topic: Kubernetes
- description: Accessing Kubernetes Pod application logs, configuring logging drivers,
    and strategies for log forwarding
  id: 21
  level: 3.97
  name: Observability - Logging
  topic: Kubernetes
- description: Implementing tracing solutions in distributed orchestration systems
    using containers and Kubernetes
  id: 23
  level: 3.98
  name: Observability - Tracing
  topic: Kubernetes
- description: Kubernetes metrics APIs, the Metrics Server, and using metrics to power
    Pod autoscaling
  id: 22
  level: 3.99
  name: Observability - Metrics
  topic: Kubernetes
- description: Using unikernels and/or micro-VMs for improved Pod security and hard
    multi-tenancy in Kubernetes
  id: 44
  level: 3.99
  name: Static Analysis
  topic: Kubernetes
- description: Guidance and best practices for building secure microservice APIs
  id: 3
  level: 4.1
  name: API Security
  topic: Kubernetes
- description: The StatefulSet application controller and Kubernetes' storage abstraction
    using Storage Classes, PVs, and PVCs
  id: 19
  level: 4.1
  name: Stateful Workloads
  topic: Kubernetes
- description: 'Storage abstractions in Kubernetes: Persistent Volumes (PVs), Persistent
    Volume Claims (PVCs), and Storage Classes'
  id: 26
  level: 4.1
  name: State Primitives
  topic: Kubernetes
- description: 'Kubernetes volumes: concepts and types; using volumes with the StatefulSet
    controller'
  id: 34
  level: 4.1
  name: State Design
  topic: Kubernetes
- description: Using LSM and SecComp to secure pod based services
  id: 38
  level: 4.1
  name: OS Hardening
  topic: Kubernetes
- description: Examination of kubernetes OS based and VM based container runtime solutions
  id: 45
  level: 4.1
  name: Runtimes
  topic: Kubernetes
- description: Using unikernels and/or micro-VMs for improved Pod security and hard
    multi-tenancy in Kubernetes
  id: 46
  level: 4.11
  name: Behavioral Analysis
  topic: Kubernetes
- description: 'Kubernetes volume operations: resizing, snapshotting, and backup and
    restore'
  id: 36
  level: 4.19
  name: State Operations
  topic: Kubernetes
- description: 'Examination of the Kubernetes database: etcd; including bootstrapping,
    sizing, backup and restore'
  id: 14
  level: 4.3
  name: etcd
  topic: Kubernetes
- description: 'Best practices for container image security: scanning, image signing,
    and binary authorization'
  id: 16
  level: 4.3
  name: Image Security
  topic: Containers
- description: 'Kubernetes ingress load balancing: concepts, rules, primitives, TLS
    termination, and rate limiting'
  id: 40
  level: 4.3
  name: Ingress Load Balancing
  topic: Kubernetes
- description: Kubernetes block storage volumes and block storage CSI features
  id: 6
  level: 4.4
  name: Block Storage
  topic: Kubernetes
- description: 'Security for stateful Pods: Secret encryption, Pod Security Policies,
    and file permissions in Pods'
  id: 30
  level: 4.4
  name: State Security
  topic: Kubernetes
- description: Securing Kubernetes clusters with zone-based architecture and firewalls
  id: 42
  level: 4.4
  name: Network Design
  topic: Kubernetes
- description: Admission controller operations and key implementations in the Kubernetes
    API Server
  id: 1
  level: 4.5
  name: Admission Control
  topic: Kubernetes
- description: Working with API auditing and audit log policies
  id: 5
  level: 4.5
  name: Auditing
  topic: Kubernetes
- description: Techniques for exposing file storage systems to Kubernetes Pods
  id: 15
  level: 4.5
  name: File Storage
  topic: Kubernetes
- description: 'Securing the Kubernetes API using TLS: best practices and common mistakes
    are discussed'
  id: 41
  level: 4.5
  name: Control Plane TLS
  topic: Kubernetes
- description: Exposing locally attached storage to application Pods with demanding
    disk IOPS
  id: 18
  level: 4.6
  name: Local Storage
  topic: Kubernetes
- description: Lightweight Kubernetes cluster multitenancy using Namespaces, Quotas,
    and LimtRanges
  id: 20
  level: 4.6
  name: Namespaces
  topic: Kubernetes
- description: Troubleshooting stuck or crashing Pods, network connectivity and service
    discovery and cluster components (optional)
  id: 35
  level: 4.99
  name: Troubleshooting
  topic: Kubernetes
